import os

from celery import Celery

# Set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'api_with_drf.settings')

app = Celery('api_with_drf')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related configuration keys
#   should have a `CELERY_` prefix.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django apps.
app.autodiscover_tasks()










# üö¶ Celery Execution Flow: Step by Step
# User ‡¶è‡¶ï‡¶ü‡¶æ order ‡¶¶‡ßá‡ßü (POST request).

# Django ‡¶∏‡ßá‡¶á order ‡¶ü‡¶ø save ‡¶ï‡¶∞‡ßá ‚Üí perform_create() call ‡¶π‡ßü‡•§

# Celery-‡¶ï‡ßá .delay() ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡¶≤‡¶æ ‡¶π‡ßü: ‚Äú‡¶è‡¶á email ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‚Äù‡•§

# Celery ‡¶∏‡ßá‡¶á task queue ‡¶ï‡¶∞‡ßá Redis ‡¶è ‡¶∞‡¶æ‡¶ñ‡ßá‡•§

# Celery worker Redis ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßá‡¶á task ‡¶®‡ßá‡ßü, ‡¶è‡¶¨‡¶Ç background-‡¶è send_mail() ‡¶ö‡¶æ‡¶≤‡¶æ‡ßü‡•§

# Meanwhile, Django user-‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶¨ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ response ‡¶¶‡¶ø‡ßü‡ßá ‡¶´‡ßá‡¶≤‡ßá ‚Äî wait ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§

# üéÅ Summary ‚Äì ‡¶ï‡ßá ‡¶ï‡ßÄ ‡¶ï‡¶∞‡ßá?
# Component	‡¶ï‡¶æ‡¶ú
# CELERY_BROKER_URL	Redis ‡¶ï‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡ßü‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ ‡¶¨‡¶æ‡¶®‡¶æ‡ßü
# @shared_task	‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ï‡ßá Celery task ‡¶¨‡¶æ‡¶®‡¶æ‡ßü
# .delay()	‡¶∏‡ßá‡¶á task-‡¶ü‡¶æ Celery worker-‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡ßü
# celery.py	Celery app ‡¶ï‡ßá configure ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç tasks detect ‡¶ï‡¶∞‡ßá
# Redis	Task-‡¶¶‡ßá‡¶∞ queue/staging ground
# Celery Worker	Real background worker ‚Äî ‡¶∏‡ßá ‡¶ï‡¶æ‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã asynchronously ‡¶ö‡¶æ‡¶≤‡¶æ‡ßü

